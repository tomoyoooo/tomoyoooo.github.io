<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>动态规划之路径问题</title>
      <link href="/2023/03/02/dong-tai-gui-hua-zhi-lu-jing-wen-ti/"/>
      <url>/2023/03/02/dong-tai-gui-hua-zhi-lu-jing-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划之路径问题"><a href="#动态规划之路径问题" class="headerlink" title="动态规划之路径问题"></a>动态规划之路径问题</h1><h2 id="1-动态规划的基础思路"><a href="#1-动态规划的基础思路" class="headerlink" title="1.动态规划的基础思路"></a>1.动态规划的基础思路</h2><ol><li><p>状态是否具有后效性：也就是对于某个状态来说，我们只需要关注前一步状态到当前状态是如何转化的，而不需要关心之前的状态，就是无后效性的。</p></li><li><p>如何定义状态：一般和结尾、答案等是有关联的。(比如最小路径和的dp数组代表的就是当前最小的路径和)</p></li><li><p>如何确定状态转移方程：可以从最后一步来进行分类讨论。</p></li><li><p>对状态转移的要求</p><blockquote><p>1)求最值等问题中，只需要要求不漏，因为重复不影响结果</p><p>2)求方案数等问题中，则需要不重不漏</p></blockquote></li><li><p>动态规划的时间复杂度往往和空间复杂度相关</p></li></ol><h2 id="2-记录经历的路径"><a href="#2-记录经历的路径" class="headerlink" title="2.记录经历的路径"></a>2.记录经历的路径</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//注意点1：倒着记录，所以存储好之后要逆序处理一次</span><span class="token comment">//注意点2：二维网格每个点的idx处理可以只利用一维数组</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                m <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m <span class="token operator">*</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> top  <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>                    <span class="token keyword">int</span> left <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>                    g<span class="token punctuation">[</span><span class="token function">getIdx</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> top <span class="token operator">&lt;</span> left <span class="token operator">?</span> <span class="token function">getIdx</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">getIdx</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 从「结尾」开始，在 g[] 数组中找「上一步」</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">getIdx</span><span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 逆序将路径点添加到 path 数组中</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        path<span class="token punctuation">[</span>m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">+</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            path<span class="token punctuation">[</span>m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">parseIdx</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            idx <span class="token operator">=</span> g<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 顺序输出位置</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">+</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">=</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">") "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> f<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">parseIdx</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>idx <span class="token operator">/</span> n<span class="token punctuation">,</span> idx <span class="token operator">%</span> n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">getIdx</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> n <span class="token operator">+</span> y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-空间优化"><a href="#3-空间优化" class="headerlink" title="3.空间优化"></a>3.空间优化</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;Leetcode120.三角形最小路径和&#x2F;&#x2F;额外可参考Leetcode931.下降路径最小和&#x2F;&#x2F;滚动数组&#x2F;&#x2F;利用DP数组特性进行进一步优化class Solution &#123;public:    int minimumTotal(vector&lt;vector&lt;int&gt;&gt;&amp; triangle) &#123;        &#x2F;*        int n &#x3D; triangle.size();        int ans &#x3D; INT_MAX;        vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n,INT_MAX));        dp[0][0] &#x3D; triangle[0][0];        for(int i &#x3D; 1; i &lt; n; ++i)&#123;            for(int j &#x3D; 0; j &lt; i+1; ++j)&#123;                if(j!&#x3D;0) dp[i][j] &#x3D; min(dp[i][j], dp[i-1][j-1]+triangle[i][j]);                if(j!&#x3D;i) dp[i][j] &#x3D; min(dp[i][j], dp[i-1][j]+triangle[i][j]);            &#125;        &#125;        for(int i &#x3D; 0; i &lt; n; ++i)&#123;            ans &#x3D; min(dp[n-1][i], ans);        &#125;        return ans;        *&#x2F;        &#x2F;*        &#x2F;&#x2F;利用滚动数组进行空间优化        int n &#x3D; triangle.size();        int ans &#x3D; INT_MAX;        &#x2F;&#x2F;滚动数组不能直接赋初值        vector&lt;vector&lt;int&gt;&gt; dp(2, vector&lt;int&gt;(n));        dp[0][0] &#x3D; triangle[0][0];        for(int i &#x3D; 1; i &lt; n; ++i)&#123;            for(int j &#x3D; 0; j &lt; i+1; ++j)&#123;                &#x2F;&#x2F;需要每次都重置当前使用的行                dp[i&amp;1][j] &#x3D; INT_MAX;                if(j!&#x3D;0) dp[i&amp;1][j] &#x3D; min(dp[i&amp;1][j], dp[(i-1)&amp;1][j-1]+triangle[i][j]);                if(j!&#x3D;i) dp[i&amp;1][j] &#x3D; min(dp[i&amp;1][j], dp[(i-1)&amp;1][j]+triangle[i][j]);            &#125;        &#125;        for(int i &#x3D; 0; i &lt; n; ++i)&#123;            ans &#x3D; min(ans, dp[(n-1)&amp;1][i]);        &#125;        return ans;        *&#x2F;        &#x2F;*        &#x2F;&#x2F;进一步的空间优化        int n &#x3D; triangle.size();        vector&lt;int&gt; f(n);        f[0] &#x3D; triangle[0][0];        for (int i &#x3D; 1; i &lt; n; ++i) &#123;            f[i] &#x3D; f[i - 1] + triangle[i][i];            for (int j &#x3D; i - 1; j &gt; 0; --j) &#123;                f[j] &#x3D; min(f[j - 1], f[j]) + triangle[i][j];            &#125;            f[0] +&#x3D; triangle[i][0];        &#125;        return *min_element(f.begin(), f.end());        *&#x2F;        &#x2F;&#x2F;由底到顶        vector&lt;int&gt; dp(triangle.back());        cout &lt;&lt; dp.size() &lt;&lt; endl;        for(int i &#x3D; triangle.size() - 2; i &gt;&#x3D; 0; i --)            for(int j &#x3D; 0; j &lt;&#x3D; i; j ++)                dp[j] &#x3D; min(dp[j], dp[j + 1]) + triangle[i][j];        return dp[0];    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-时间优化"><a href="#4-时间优化" class="headerlink" title="4.时间优化"></a>4.时间优化</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;1.考虑状态转移时是否有多余部分&#x2F;&#x2F;2.考虑使用的条件(如此题的上行值)，是否是固定操作(只需要最小值和次小值)class Solution &#123;public:    int minFallingPathSum(vector&lt;vector&lt;int&gt;&gt;&amp; grid) &#123;        &#x2F;*        int n &#x3D; grid.size();        if(n&#x3D;&#x3D;1) return grid[0][0];        vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n));        for(int i &#x3D; 0; i &lt; n; ++i) dp[0][i] &#x3D; grid[0][i];        for(int i &#x3D; 1; i &lt; n; ++i)&#123;            for(int j &#x3D; 0; j &lt; n; ++j)&#123;                dp[i][j] &#x3D; INT_MAX;                for(int k &#x3D; 0; k &lt; n; ++k)&#123;                    if(k!&#x3D;j)&#123;                        dp[i][j] &#x3D; min(dp[i][j], dp[i-1][k]);                    &#125;                &#125;                dp[i][j] +&#x3D; grid[i][j];            &#125;        &#125;        int ans &#x3D; INT_MAX;        for(int i &#x3D; 0; i &lt; n; ++i)&#123;            ans &#x3D; min(ans, dp[n-1][i]);        &#125;        return ans;        *&#x2F;        &#x2F;&#x2F;考虑到只会用到最小值和次小值        int n &#x3D; grid.size();        if(n&#x3D;&#x3D;1) return grid[0][0];        vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n));        int pre &#x3D; -1;        int minn &#x3D; -1;        for(int i &#x3D; 0; i &lt; n; ++i)&#123;            dp[0][i] &#x3D; grid[0][i];            if(dp[0][i]&lt;&#x3D;(minn&#x3D;&#x3D;-1 ? INT_MAX : dp[0][minn]))&#123;                pre &#x3D; minn;                minn &#x3D; i;            &#125;            else if(dp[0][i]&lt;&#x3D;(pre&#x3D;&#x3D;-1 ? INT_MAX : dp[0][pre]))&#123;                pre &#x3D; i;            &#125;        &#125;         for(int i &#x3D; 1; i &lt; n; ++i)&#123;            int mintemp &#x3D; -1;            int pretemp &#x3D; -1;            for(int j &#x3D; 0; j &lt; n; ++j)&#123;                &#x2F;&#x2F;dp[i][j] &#x3D; INT_MAX;                if(j&#x3D;&#x3D;minn)&#123;                    dp[i][j] &#x3D; dp[i-1][pre] + grid[i][j];                &#125;                else&#123;                    dp[i][j] &#x3D; dp[i-1][minn] + grid[i][j];                &#125;                if(dp[i][j]&lt;&#x3D;(mintemp&#x3D;&#x3D;-1 ? INT_MAX : dp[i][mintemp]))&#123;                    pretemp &#x3D; mintemp;                    mintemp &#x3D; j;                &#125;                else if(dp[i][j]&lt;&#x3D;(pretemp&#x3D;&#x3D;-1 ? INT_MAX : dp[i][pretemp]))&#123;                    pretemp &#x3D; j;                &#125;            &#125;            minn &#x3D; mintemp;            pre &#x3D; pretemp;        &#125;        int ans &#x3D; INT_MAX;        for(int i &#x3D; 0; i &lt; n; ++i)&#123;            ans &#x3D; min(ans, dp[n-1][i]);        &#125;        return ans;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-记忆化搜索"><a href="#5-记忆化搜索" class="headerlink" title="5.记忆化搜索"></a>5.记忆化搜索</h2><ol><li><p>所谓的记忆化搜索重点就在于对中间结果的记录，使得后续可以直接利用</p></li><li><p>注意点</p></li></ol><ul><li>递归函数的出参(返回值)和入参(每轮的形参)</li><li>递归函数的出口(有效情况即完成事件，无效情况即终止事件)</li><li>最小单元处理逻辑(如何进入到下一轮)</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;Leetcode 1575.统计所有可行路径class Solution &#123;public:    vector&lt;vector&lt;int&gt;&gt; cnt;    const int mod &#x3D; 1000000007;    int dfs(vector&lt;int&gt;&amp; locations, int now, int finish, int fuelnow)&#123;        &#x2F;&#x2F;已经处理过的不再重复处理        if(cnt[now][fuelnow]!&#x3D;-1)&#123;            return cnt[now][fuelnow];        &#125;        int n &#x3D; locations.size();        &#x2F;&#x2F;油耗尽且未到达终点        if(fuelnow&#x3D;&#x3D;0 &amp;&amp; now!&#x3D;finish)&#123;            cnt[now][fuelnow] &#x3D; 0;            return 0;        &#125;        &#x2F;&#x2F;油未耗尽但无法继续前进        bool hasNext &#x3D; false;        for(int i &#x3D; 0; i &lt; n; ++i)&#123;            if(i!&#x3D;now)&#123;                int cost &#x3D; abs(locations[i]-locations[now]);                if(fuelnow &gt;&#x3D; cost)&#123;                    hasNext &#x3D; true;                    break;                &#125;            &#125;        &#125;        if(fuelnow &amp;&amp; !hasNext)&#123;            int temp &#x3D; cnt[now][fuelnow] &#x3D; now&#x3D;&#x3D;finish?1:0;            return temp;        &#125;        &#x2F;&#x2F;如何进入下一轮，并且进行累加        int sum &#x3D; now&#x3D;&#x3D;finish?1:0;        for(int i &#x3D; 0; i &lt; n; ++i)&#123;            if(i!&#x3D;now)&#123;                int cost &#x3D; abs(locations[i]-locations[now]);                if(fuelnow &gt;&#x3D; cost)&#123;                    sum +&#x3D; dfs(locations, i, finish, fuelnow-cost);                    sum %&#x3D; mod;                &#125;            &#125;        &#125;        cnt[now][fuelnow] &#x3D; sum;        &#x2F;&#x2F;返回路径数量和        return sum;    &#125;    int countRoutes(vector&lt;int&gt;&amp; locations, int start, int finish, int fuel) &#123;        &#x2F;&#x2F;dfs        int n &#x3D; locations.size();        cnt.resize(n, vector&lt;int&gt;(fuel+1, -1));        return dfs(locations, start, finish, fuel);    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;Leetcode 403.青蛙过河class Solution &#123;public:    unordered_map&lt;int,bool&gt; book;    unordered_map&lt;int,int&gt; mp;    vector&lt;int&gt; dir&#123;-1,0,1&#125;;    bool dfs(vector&lt;int&gt;&amp; stones, int k, int index)&#123;        int n &#x3D; stones.size();        &#x2F;&#x2F;相当于将原本需要两个int维度表示的东西合并成一个维度，        &#x2F;&#x2F;因此二维数组book可以直接使用哈希表代替        &#x2F;&#x2F;原本-1代表false,1代表true，0代表未计算        &#x2F;&#x2F;现在不存在即未计算        int key &#x3D; index*10000+k;        if(book.count(key)) return book[key];        if(index&#x3D;&#x3D;n-1)&#123;            return true;        &#125;        for(int i &#x3D; 0; i &lt; 3; ++i)&#123;            int newk &#x3D; k + dir[i];            if(newk&lt;&#x3D;0) continue;            if(mp.count(stones[index]+newk))&#123;                bool flag &#x3D; dfs(stones, newk, mp[stones[index]+newk]);                book[key] &#x3D; flag;                if(flag) return true;            &#125;        &#125;        book[key] &#x3D; false;        return false;    &#125;    bool canCross(vector&lt;int&gt;&amp; stones) &#123;        int n &#x3D; stones.size();        if(stones[1]!&#x3D;1) return false;        for(int i &#x3D; 0; i &lt; n; ++i)&#123;            mp[stones[i]] &#x3D; i;        &#125;        return dfs(stones,1,1);;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;Leetcode 494.目标和class Solution &#123;public:    &#x2F;*    &#x2F;&#x2F;存在负权值也可以使用哈希表规避    unordered_map&lt;int,int&gt; mp;    int dfs(vector&lt;int&gt;&amp; nums, int target, int now, int index)&#123;        int key &#x3D; now*100+index;        if(mp.count(key)) return mp[key];        if(index&#x3D;&#x3D;nums.size())&#123;            mp[key] &#x3D; now&#x3D;&#x3D;target ? 1 : 0;            return mp[key];        &#125;        int plus &#x3D; dfs(nums, target, now+nums[index], index+1);        int dec &#x3D; dfs(nums, target, now-nums[index], index+1);        mp[key] &#x3D; plus+dec;        return mp[key];    &#125;    int findTargetSumWays(vector&lt;int&gt;&amp; nums, int target) &#123;        &#x2F;&#x2F;dp[i][j]以i为结尾，结果为j的方案数        return dfs(nums, target, 0, 0);    &#125;    *&#x2F;        &#x2F;&#x2F;转动态规划    int findTargetSumWays(vector&lt;int&gt;&amp; nums, int target) &#123;        &#x2F;&#x2F;dp[i][j] &#x3D; dp[i-1][j+nums[i-1]] + dp[i-1][j-nums[i-1]];        int n &#x3D; nums.size();        int sum &#x3D; 0;        for(int i &#x3D; 0; i &lt; n; ++i)&#123;            sum +&#x3D; abs(nums[i]);        &#125;        if(sum &lt; abs(target)) return 0;        vector&lt;vector&lt;int&gt;&gt; dp(n+1, vector&lt;int&gt;(2*sum+1));        dp[0][sum] &#x3D; 1;        for(int i &#x3D; 1; i &lt;&#x3D; n; ++i)&#123;            int x&#x3D; nums[i-1];            for(int j &#x3D; -sum; j &lt;&#x3D; sum; ++j)&#123;                if(j-x+sum&gt;&#x3D;0) dp[i][j+sum] +&#x3D; dp[i-1][j-x+sum];                if(j+x+sum&lt;&#x3D;2*sum) dp[i][j+sum] +&#x3D; dp[i-1][j+x+sum];            &#125;        &#125;        return dp[n][target+sum];    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><ol><li>熟悉的题使用以往经验直接猜测状态定义，然后梳理出状态转移方程</li><li>所有dp题都可以先考虑记忆化搜索的方法，然后根据记忆化搜索的函数形参来确定dp数组的状态定义</li></ol><h2 id="7-练习"><a href="#7-练习" class="headerlink" title="7.练习"></a>7.练习</h2><ol><li>二维矩阵，只能往右和往下走奇数步，求最终方案数</li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;int dp[2003][2003];int row[2][2003];int col[2003][2];int main()&#123;    int T,n,m;    cin &gt;&gt; T;    while(T--)&#123;        cin &gt;&gt; n &gt;&gt; m;        memset(dp, 0, sizeof(dp));        memset(row, 0, sizeof(row));        memset(col, 0, sizeof(col));        dp[1][1] &#x3D; 1;        row[1][1] &#x3D; 1;        col[1][1] &#x3D; 1;        for(int i &#x3D; 2; i &lt;&#x3D; n; ++i)&#123;            dp[i][1] &#x3D; row[(i-1)&amp;1][1];            row[i&amp;1][1] +&#x3D; dp[i][1];            col[i][1] +&#x3D; dp[i][1];            &#x2F;&#x2F;cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; row[i&amp;1][1] &lt;&lt; endl;        &#125;        for(int i &#x3D; 2; i &lt;&#x3D; m; ++i)&#123;            dp[1][i] &#x3D; col[1][(i-1)&amp;1];            col[1][i&amp;1] +&#x3D; dp[1][i];            row[1][i] +&#x3D; dp[1][i];            &#x2F;&#x2F;cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; col[1][i&amp;1] &lt;&lt; endl;        &#125;        &#x2F;*        for(int i &#x3D; 1; i &lt;&#x3D; n; ++i)&#123;            for(int j &#x3D; 1; j &lt;&#x3D; m; ++j)&#123;                cout &lt;&lt; dp[i][j] &lt;&lt; &quot; &quot;;            &#125;            cout &lt;&lt; endl;        &#125;        for(int i &#x3D; 0; i &lt;&#x3D; 1; ++i)&#123;            for(int j &#x3D; 1; j &lt;&#x3D; m; ++j)&#123;                cout &lt;&lt; row[i][j] &lt;&lt; &quot; &quot;;            &#125;            cout &lt;&lt; endl;        &#125;        for(int i &#x3D; 1; i &lt;&#x3D; n; ++i)&#123;            for(int j &#x3D; 0; j &lt;&#x3D; 1; ++j)&#123;                cout &lt;&lt; col[i][j] &lt;&lt; &quot; &quot;;            &#125;            cout &lt;&lt; endl;        &#125;*&#x2F;        for(int i &#x3D; 2; i &lt;&#x3D; n; ++i)&#123;            for(int j &#x3D; 2; j &lt;&#x3D; m; ++j)&#123;                dp[i][j] &#x3D; row[(i-1)&amp;1][j] + col[i][(j-1)&amp;1];                &#x2F;&#x2F;cout &lt;&lt; dp[i][j] &lt;&lt; endl;                row[i&amp;1][j] +&#x3D; dp[i][j];                col[i][j&amp;1] +&#x3D; dp[i][j];            &#125;        &#125;        for(int i &#x3D; 1; i &lt;&#x3D; n; ++i)&#123;            for(int j &#x3D; 1; j &lt;&#x3D; m; ++j)&#123;                cout &lt;&lt; dp[i][j] &lt;&lt; &quot; &quot;;            &#125;            cout &lt;&lt; endl;        &#125;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分搜索</title>
      <link href="/2023/03/02/er-fen-sou-suo/"/>
      <url>/2023/03/02/er-fen-sou-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h1><ol><li><p>计算 mid 时需要防⽌溢出，代码中 left + (right - left) &#x2F; 2 就和 (left + right) &#x2F; 2 的结果相同，但是有效防⽌了 left 和 right 太⼤，直接相加导致溢出的情况</p></li><li><p>需要注意的点</p><blockquote><ul><li>while的判断条件，是否有等于</li><li>初始化的right是n还是n-1：都可以，但是后续处理不同</li><li>最终结果使用mid还是left&#x2F;right</li><li>left&#x3D;&#x3D;mid还是left&#x3D;&#x3D;mid+1 (right&#x3D;&#x3D;mid || right&#x3D;&#x3D;mid-1)</li><li>注意left和right分别的取值范围，看是否需要判断越界</li></ul></blockquote></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Leetcode 704.二分查找</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//查询区间为[left, right)，所以left==right时也不会进行查询</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment">//System.out.println(mid);</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token comment">//mid找过了，所以后续区间和此时的mid已经无关了</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> right <span class="token operator">=</span> mid<span class="token punctuation">;</span> <span class="token comment">//[left, mid)</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//[mid+1, right)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-1、寻找左侧边界"><a href="#2-1、寻找左侧边界" class="headerlink" title="2.1、寻找左侧边界"></a>2.1、寻找左侧边界</h2><ol><li>例如[-1,2,2,2,3]寻找第一个2</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//查询区间为[left, right)</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//查询区间为[left, right)，所以left==right时也不会进行查询</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment">//System.out.println(mid);</span>            <span class="token comment">//这一步改变即可，区间变为[left, mid)，也就是缩小右边界，抛弃有边界符合条件的数</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span> right <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> right <span class="token operator">=</span> mid<span class="token punctuation">;</span> <span class="token comment">//[left, mid)</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//[mid+1, right)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//最终left就是左边界所在位置，如果只有一个结果，left==right</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2、寻找右侧边界-同上"><a href="#2-2、寻找右侧边界-同上" class="headerlink" title="2.2、寻找右侧边界(同上)"></a>2.2、寻找右侧边界(同上)</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment">//System.out.println(mid);</span>            <span class="token comment">//这一步改变即可</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span> left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> right <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//此处有区别，因为left==mid+1最后是不等于target的</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3、例子"><a href="#2-3、例子" class="headerlink" title="2.3、例子"></a>2.3、例子</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Leetcode 34.在排序数组中查找元素的第一个和最后一个位置</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//此时使用的区间是[left, right]</span>        <span class="token comment">//先寻找左边界</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment">//[left, mid-1]</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span> right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//[left, mid-1]</span>            <span class="token keyword">else</span> left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//[mid+1, right]</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>nums<span class="token punctuation">.</span>length <span class="token operator">||</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">!=</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>        left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//再寻找右边界</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment">//[mid+1, right]</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span> right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//[left, mid-1]</span>            <span class="token keyword">else</span> left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//[mid+1, right]</span>        <span class="token punctuation">&#125;</span>        ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//left==right or left==right+1</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间操作总结</title>
      <link href="/2023/02/28/qu-jian-cao-zuo-zong-jie/"/>
      <url>/2023/02/28/qu-jian-cao-zuo-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="区间求和总结"><a href="#区间求和总结" class="headerlink" title="区间求和总结"></a>区间求和总结</h1><ol><li><p>数组不变，区间查询：前缀和、树状数组、线段树</p></li><li><p>数组单点修改，区间查询：树状数组、线段树</p></li><li><p>数组区间修改，单点查询：差分数组、线段树</p></li><li><p>数组区间修改，区间查询：线段树、树状数组</p></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>线段树尽量在第四种情况再考虑，因为代码长，常数大，实际表现不算好</li><li>优先级</li></ol><ul><li>简单求区间和： 前缀和</li><li>多次将某个区间变成同一个数： 线段树</li><li>其他情况： 树状数组</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 区间操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀和</title>
      <link href="/2023/02/28/qian-zhui-he/"/>
      <url>/2023/02/28/qian-zhui-he/</url>
      
        <content type="html"><![CDATA[<h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><ol><li>一维前缀和</li></ol><ul><li>第i个位置存储的是从[0,i]所有数字的和</li><li>求[L,R]的数字和，直接sum[R]-sum[L-1]即可</li></ul><ol start="2"><li>二维前缀和</li></ol><ul><li>[i,j]位置存储的是[0,0]到[i,j]整个矩形内所有格子的和</li><li><img src="/2023/02/28/qian-zhui-he/%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C.png" alt="二维前缀和"></li></ul><h2 id="leetcode-661-图片平滑器"><a href="#leetcode-661-图片平滑器" class="headerlink" title="leetcode 661.图片平滑器"></a>leetcode 661.图片平滑器</h2><pre class="line-numbers language-none"><code class="language-none">vector&lt;vector&lt;int&gt;&gt; imageSmoother(vector&lt;vector&lt;int&gt;&gt;&amp; img) &#123;        int n &#x3D; img.size();        int m &#x3D; img[0].size();        vector&lt;vector&lt;int&gt;&gt; sum(n+1, vector&lt;int&gt;(m+1));        vector&lt;vector&lt;int&gt;&gt; ans(n, vector&lt;int&gt;(m));        for(int i &#x3D; 1; i &lt;&#x3D; n; ++i)&#123;            for(int j &#x3D; 1; j &lt;&#x3D; m; ++j)&#123;                sum[i][j] &#x3D; sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + img[i-1][j-1];            &#125;        &#125;        for(int i &#x3D; 0; i &lt; n; ++i)&#123;            for(int j &#x3D; 0; j &lt; m; ++j)&#123;                int a &#x3D; max(0,i-1), b &#x3D; max(0,j-1);                int c &#x3D; min(i+1, n-1), d &#x3D; min(j+1, m-1);                int num &#x3D; (c-a+1)*(d-b+1);                int tot &#x3D; sum[c+1][d+1] - sum[a][d+1] - sum[c+1][b] + sum[a][b];                ans[i][j] &#x3D; tot&#x2F;num;            &#125;        &#125;        return ans;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="304-二维区域和检索"><a href="#304-二维区域和检索" class="headerlink" title="304.二维区域和检索"></a>304.二维区域和检索</h2><pre class="line-numbers language-none"><code class="language-none">vector&lt;vector&lt;int&gt;&gt; sums;    NumMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;        int n &#x3D; matrix.size();        int m &#x3D; matrix[0].size();        sums.resize(n+1, vector&lt;int&gt;(m+1));        for(int i &#x3D; 1; i &lt;&#x3D; n; ++i)&#123;            for(int j &#x3D; 1; j &lt;&#x3D; m; ++j)&#123;                sums[i][j] &#x3D; sums[i-1][j] + sums[i][j-1] - sums[i-1][j-1] + matrix[i-1][j-1];            &#125;        &#125;    &#125;        int sumRegion(int row1, int col1, int row2, int col2) &#123;        return sums[row2+1][col2+1] - sums[row1][col2+1] - sums[row2+1][col1] + sums[row1][col1];    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 区间操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组</title>
      <link href="/2023/02/28/shu-zhuang-shu-zu/"/>
      <url>/2023/02/28/shu-zhuang-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="树状数组-二进制下标树"><a href="#树状数组-二进制下标树" class="headerlink" title="树状数组(二进制下标树)"></a>树状数组(二进制下标树)</h1><p><a href="https://zhuanlan.zhihu.com/p/93795692">参考资料1</a><br><a href="https://www.zhihu.com/question/54404092">参考资料2</a></p><ol><li><p>单点修改和区间查询，时间复杂度均为O(log n)</p></li><li><p>空间复杂度O(n)</p></li><li><p>树状数组本质上利用了两个性质</p></li></ol><ul><li>二叉树的分层性质：方便分组</li><li>分组依据-二进制数字的lowbit性质：<blockquote><ul><li>lowbit就是取出二进制数字右数第一个1以及所有的0，比如6的二进制就是110，lowbit(6)就是10，即lowbit(6)&#x3D;2。  数字的lowbit可以根据计算机的补码性质轻松求出，即lowbit(x) &#x3D; x&amp;(-x)。</li><li>分层其实就是按照lowbit的大小分的层，举例{1,2,3,4}，1的lowbit为1，所以在第一层；2的lowbit为2，所以在第二层，且1+lowbit(1)&#x3D;&#x3D;2 &amp;&amp; 2-lowbit(2)&#x3D;&#x3D;0，所以tree[2]&#x3D;nums[1]+nums[2]；而对应的lowbit(4)&#x3D;&#x3D;4，在第三层且4-lowbit(4)&#x3D;&#x3D;0，所以tree[4]应该是[1,4]的和<br><img src="/2023/02/28/shu-zhuang-shu-zu/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84.png" alt="树状数组"></li></ul></blockquote></li></ul><ol start="4"><li><p>对于数组为i的节点，代表的信息区间为[i-lowbit(i)+1, i]</p></li><li><p>树状数组可以用于求区间和，区间最值等</p></li><li><p>树状数组的区间查询<a href="https://blog.csdn.net/qq_21841245/article/details/43956633">参考</a></p></li></ol><ul><li>额外引入两个树状数组：</li><li>delta[i]为差分数组的前缀和，比如第一次[1,3]同时加1，第二次[1,4]同时加1，则delta为[2,0,0,-1,-1]</li><li>delta[i]*i为第二个数组</li><li>比如[l,r]范围同时加1，delta[l]+&#x3D;1，delta[r+1]-&#x3D;1</li><li>公式:sum[1,i] &#x3D; tree[i] + (i+1)*delta[i] - delta[i]*i</li></ul><h2 id="leetcode-307-区域和检索-数组可修改"><a href="#leetcode-307-区域和检索-数组可修改" class="headerlink" title="leetcode 307.区域和检索-数组可修改"></a>leetcode 307.区域和检索-数组可修改</h2><pre class="line-numbers language-none"><code class="language-none">class NumArray &#123;public:    vector&lt;int&gt; tree;    int lowbit(int x) &#123;        return x &amp; -x;    &#125;        int query(int x) &#123;        int ans &#x3D; 0;        &#x2F;&#x2F;找[1,x]的和        for(int i &#x3D; x; i &gt; 0; i -&#x3D; lowbit(i))            ans +&#x3D; tree[i];        return ans;    &#125;    void add(int x, int u) &#123;        &#x2F;&#x2F;所有x节点影响的父节点        for(int i &#x3D; x; i &lt;&#x3D; n; i +&#x3D; lowbit(i))            tree[i] +&#x3D; u;    &#125;    vector&lt;int&gt; nums;    int n;    NumArray(vector&lt;int&gt;&amp; nums) &#123;        this-&gt;nums &#x3D; nums;        n &#x3D; nums.size();        tree.resize(n+1, 0);        for(int i &#x3D; 0; i &lt; n; i++)            add(i+1, nums[i]);    &#125;        void update(int index, int val) &#123;        &#x2F;&#x2F;更新差值        add(index+1, val-nums[index]);        nums[index] &#x3D; val;    &#125;        int sumRange(int left, int right) &#123;        &#x2F;&#x2F;[left,right] &#x3D; [1, right+1] - [1, left]        return query(right+1) - query(left);    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 区间操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/2023/02/28/xian-duan-shu/"/>
      <url>/2023/02/28/xian-duan-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><ol><li>线段树有两种操作：更新(时间复杂度O(logn))，区间查询(时间复杂度O(logn));</li><li>n个节点，树的最大深度为log2(n-1)往下取整后+2</li><li>使用线段树统计的东西必须符合区间加法，比如数字和，最大公因数，最大值等，不能统计需要连续性的东西</li><li>线段树所需空间：将n向上扩充到最近的2的某个次方，再*2(简单一点就直接4*n的大小)</li><li>线段树是一个完全二叉树，比如给定一个数组[1,5,3,7,3,2,5,7],对应的最小值线段树如下图：</li></ol><p><img src="/2023/02/28/xian-duan-shu/%E6%9C%80%E5%B0%8F%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%A4%BA%E4%BE%8B.png" alt="最小值线段树"><br><img src="/2023/02/28/xian-duan-shu/%E6%9C%80%E5%B0%8F%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%AF%B9%E5%BA%94%E5%8C%BA%E9%97%B4.png" alt="对应区间"><br><img src="/2023/02/28/xian-duan-shu/%E6%9C%80%E5%B0%8F%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%95%B0%E7%BB%84%E6%83%85%E5%86%B5.png" alt="数组情况"></p><h2 id="定义与建树"><a href="#定义与建树" class="headerlink" title="定义与建树"></a>定义与建树</h2><pre class="line-numbers language-none"><code class="language-none">#define maxn 10007;int Sum[maxn&lt;&lt;2]; &#x2F;&#x2F;4倍空间int Add[max&lt;&lt;2]; &#x2F;&#x2F;懒惰标记int A[maxn],n;&#x2F;&#x2F; 2*v -&gt; v&lt;&lt;1 ; 2*v+1 -&gt; v&lt;&lt;1|1&#x2F;&#x2F; 求和函数void PushUp(int rt)&#123;  Sum[rt] &#x3D; Sum[rt&lt;&lt;1] + Sum[rt&lt;&lt;1|1];&#125;&#x2F;&#x2F;[l,r]表示当前节点区间，rt表示当前节点的实际存储位置&#x2F;&#x2F;本示例为求和void Build(int l, int r, int rt)&#123;  if(l&#x3D;&#x3D;r)&#123;    Sum[rt] &#x3D; A[l];    return;  &#125;  int m &#x3D; l + (r-l)&gt;&gt;1;  Build(l,m,rt&lt;&lt;1);  Build(m+1,r,rt&lt;&lt;1|1);  PushUp(rt);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单点修改-A-L-x3D-C"><a href="#单点修改-A-L-x3D-C" class="headerlink" title="单点修改:A[L]+&#x3D;C"></a>单点修改:A[L]+&#x3D;C</h2><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;从叶节点修改到本节点void Update(int L, int C, int l, int r, int rt)&#123;  if(l&#x3D;&#x3D;r)&#123;    Sum[rt] +&#x3D; C;    return;  &#125;  int m &#x3D; (l+r)&gt;&gt;1;  if(L&lt;&#x3D;m) Update(L,C,l,m,rt&lt;&lt;1);  else Update(L,C,l,m,rt&lt;&lt;1|1);  PushUp(rt);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="区间查询-A-L…R"><a href="#区间查询-A-L…R" class="headerlink" title="区间查询:A[L…R]"></a>区间查询:A[L…R]</h2><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;[1,n]的线段树可以将任意子区间[L,R]分解为不超过2*log2(n-1)向下取整个子区间&#x2F;&#x2F;[L,R]为操作区间，[l,r]为当前区间int Query(int L, int R, int l, int r, int rt)&#123;  if(L&lt;&#x3D;l &amp;&amp; r&lt;&#x3D;R)&#123;    return Sum[rt];  &#125;  int m &#x3D; (l+r)&gt;&gt;1;  PushDown(rt, m-l+1, r-m);  int ans &#x3D; 0;  if(L&lt;&#x3D;m) ans +&#x3D; Query(L,R,l,m,rt&lt;&lt;1);  if(R&gt;&#x3D;m) ans +&#x3D; Query(L,R,m+1,r,rt&lt;&lt;1|1);  return ans;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="区间修改-A-L-R-x3D-C"><a href="#区间修改-A-L-R-x3D-C" class="headerlink" title="区间修改:A[L,R]+&#x3D;C"></a>区间修改:A[L,R]+&#x3D;C</h2><pre class="line-numbers language-none"><code class="language-none">void Update(int L, int R, int C, int l, int r, int rt)&#123;  if(L&lt;&#x3D;l &amp;&amp; r&lt;&#x3D;R)&#123;    Sum[rt] +&#x3D; C*(r-l+1);    Add[rt] +&#x3D; C;    return;  &#125;  int m &#x3D; (l+r)&gt;&gt;1;  PushDown(rt, m-l+1, r-m);  if(L&lt;&#x3D;m) Update(L,R,C,l,m,rt&lt;&lt;1);  if(R&gt;&#x3D;m) Update(L,R,C,m+1,r,rt&lt;&lt;1|1);  PushUp(rt); &#125;&#x2F;&#x2F;ln和rn为左子树和右子树的数字数量void PushDown(int rt, int ln, int rn)&#123;  if(Add[rt])&#123;    Add[rt&lt;&lt;1] +&#x3D; Add[rt];    Add[rt&lt;&lt;1|1] +&#x3D; Add[rt];    Sum[rt&lt;&lt;1] +&#x3D; Add[rt]*ln;    Sum[rt&lt;&lt;1|1] +&#x3D; Add[rt]*rn;    Add[rt] &#x3D; 0;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="leetcode-307-区域和检索-数组可修改"><a href="#leetcode-307-区域和检索-数组可修改" class="headerlink" title="leetcode 307.区域和检索-数组可修改"></a>leetcode 307.区域和检索-数组可修改</h2><pre class="line-numbers language-none"><code class="language-none">class NumArray &#123;public:    vector&lt;int&gt; segmentTree;    int n;    void build(int node, int l, int r, vector&lt;int&gt; &amp;nums)&#123;        if(l&#x3D;&#x3D;r)&#123;            segmentTree[node]&#x3D; nums[l];            return;        &#125;        int m &#x3D; l + (r-l)&#x2F;2;        build(node*2+1, l, m, nums);        build(node*2+2, m+1, r, nums);        segmentTree[node] &#x3D; segmentTree[node*2+1] + segmentTree[node*2+2];    &#125;    void change(int index, int val, int node, int l, int r)&#123;        if(l&#x3D;&#x3D;r)&#123;            segmentTree[node] &#x3D; val;            return;        &#125;        int m &#x3D; l + (r-l)&#x2F;2;        if(index &lt;&#x3D; m)&#123;            change(index, val, node*2+1, l, m);        &#125;        else&#123;            change(index, val, node*2+2, m+1, r);        &#125;        segmentTree[node] &#x3D; segmentTree[node*2+1] + segmentTree[node*2+2];    &#125;    int range(int left, int right, int node, int l, int r)&#123;        if(left&#x3D;&#x3D;l &amp;&amp; right&#x3D;&#x3D;r)&#123;            return segmentTree[node];        &#125;        int m &#x3D; l + (r-l)&#x2F;2;        if(right &lt;&#x3D; m)&#123;            return range(left, right, node*2+1, l, m);        &#125;        else if(left &gt; m)&#123;            return range(left, right, node*2+2, m+1, r);        &#125;        else&#123;            return range(left, m, node*2+1, l, m) + range(m+1, right, node*2+2, m+1, r);        &#125;    &#125;        NumArray(vector&lt;int&gt;&amp; nums) &#123;        n &#x3D; nums.size();        segmentTree.resize(n*4);        build(0,0,n-1,nums);    &#125;        void update(int index, int val) &#123;        change(index, val, 0, 0, n-1);    &#125;        int sumRange(int left, int right) &#123;        return range(left, right, 0, 0, n-1);    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="leetcode-731-我的日程安排表-II"><a href="#leetcode-731-我的日程安排表-II" class="headerlink" title="leetcode 731.我的日程安排表 II"></a>leetcode 731.我的日程安排表 II</h2><pre class="line-numbers language-none"><code class="language-none">class MyCalendarTwo &#123;public:    MyCalendarTwo() &#123;    &#125;    void update(int start, int end, int val, int l, int r, int idx) &#123;        if(start&gt;r || end&lt;l) return;        else if(start&lt;&#x3D;r &amp;&amp; end&gt;&#x3D;l)&#123;            tree[idx].first +&#x3D; val;            tree[idx].second +&#x3D; val;        &#125;        else&#123;            int mid &#x3D; (l+r) &gt;&gt; 1;            update(start, end-1, 1, l, mid, 2*idx);            update(start, end-1, 1, mid+1, r, 2*idx+1);            tree[idx].first &#x3D; tree[idx].second + max(tree[2*idx].first, tree[2*idx+1].first);        &#125;    &#125;    bool book(int start, int end) &#123;                    update(start, end-1, 1, 1, 1e9, 1);        if(tree[1].first &gt; 2)&#123;            update(start, end-1, -1, 1, 1e9, 1);            return false;        &#125;        return true;    &#125;private:    unordered_map&lt;int, pair&lt;int, int&gt;&gt; tree;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 区间操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>差分数组</title>
      <link href="/2023/02/28/chai-fen-shu-zu/"/>
      <url>/2023/02/28/chai-fen-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="差分数组"><a href="#差分数组" class="headerlink" title="差分数组"></a>差分数组</h1><ol><li><a href="https://blog.csdn.net/qq_31601743/article/details/105352885">参考资料</a></li><li>适用于有频繁修改区间操作的情况，查询时需要遍历</li><li>差分数组d[i]，即记录前后数组值的差，保存在一个新的数组中，其中d[0]&#x3D;arr[0]-0; arr为原数组</li><li>修改区间值时，只需要修改**(修改区间内左边第一个点) <strong>和</strong>(修改区间外右边第一个点)**两个端点的差分数组的值</li><li>查询原数组arr现在的某个值时，需要遍历使用差分数组和原数组结合计算才能查询到</li></ol><h2 id="Leetcode-798-得分最高的最小轮调"><a href="#Leetcode-798-得分最高的最小轮调" class="headerlink" title="Leetcode 798.得分最高的最小轮调"></a>Leetcode 798.得分最高的最小轮调</h2><pre class="line-numbers language-none"><code class="language-none">class Solution &#123;public:    int bestRotation(vector&lt;int&gt;&amp; nums) &#123;        int n &#x3D; nums.size();        vector&lt;int&gt; diff &#x3D; vector&lt;int&gt;(n, 0);        int r1, r2;        for(int i &#x3D; 0; i&lt;n; i++) &#123;            r1 &#x3D; min(i, i - nums[i]);            if(r1 &gt;&#x3D; 0) &#123; &#x2F;&#x2F; [0, min(i, i-nums[i])]                diff[0]++;                if(r1 &lt; n-1) &#123;                    diff[r1 + 1]--;                &#125;            &#125;            r2 &#x3D; min(n - 1, n + i - nums[i]);            if(r2 &lt; n &amp;&amp; r2 &gt; i) &#123;                diff[i+1]++;                if(r2 &lt; n-1) &#123;                    diff[r2 + 1]--;                &#125;            &#125;            &#x2F;&#x2F; cout &lt;&lt; r1 &lt;&lt; &quot; &quot; &lt;&lt; r2 &lt;&lt; endl;        &#125;                int ans &#x3D; 0;        int maxScore &#x3D; 0;        int acc &#x3D; 0;        for(int i &#x3D; 0; i &lt; n; i++) &#123;            acc +&#x3D; diff[i];            if(acc &gt; maxScore) &#123;                maxScore &#x3D; acc;                ans &#x3D; i;            &#125;        &#125;        return ans;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Leetcode-1109-航班预订统计"><a href="#Leetcode-1109-航班预订统计" class="headerlink" title="Leetcode 1109.航班预订统计"></a>Leetcode 1109.航班预订统计</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">corpFlightBookings</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bookings<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> diff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> bookings<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> first <span class="token operator">=</span> bookings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> last <span class="token operator">=</span> bookings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> val <span class="token operator">=</span> bookings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            diff<span class="token punctuation">[</span>first<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> val<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>last <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> diff<span class="token punctuation">[</span>last<span class="token punctuation">]</span> <span class="token operator">-=</span> val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Leetcode-1094-拼车"><a href="#Leetcode-1094-拼车" class="headerlink" title="Leetcode 1094.拼车"></a>Leetcode 1094.拼车</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">carPooling</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> trips<span class="token punctuation">,</span> <span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> trips<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>trips<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> trips<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>trips<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> trips<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//for(int i = 0; i &lt; 10; ++i) System.out.print(nums[i]+" ");</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1001</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">></span>capacity<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 区间操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2023/02/28/bing-cha-ji/"/>
      <url>/2023/02/28/bing-cha-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><ol><li>并查集是一种树型的数据结构，用于处理一些不相交集合的合并及查询问题</li><li>通常包含两种操作：查找(查询两个元素是否在同一个集合中)、合并(合并不相交的集合)</li><li>路径压缩：原本并查集每个节点存的是自己的父节点，改为存根节点，方便查找和合并</li><li>按秩合并：路径优化后，两个大小不同的集合合并时，如果将大集合并入小集合，可能会导致更多的操作次数。所以记录每个集合(树)的深度(rank)，<br>将深度小的并入深度大的集合</li></ol><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;并查集类class DisJointSetUnion&#123;private:    &#x2F;&#x2F; 所有根结点相同的结点位于同一个集合中    vector&lt;int&gt; parent;    &#x2F;&#x2F; 双亲结点数组，记录该结点的双亲结点，用于查找该结点的根结点    vector&lt;int&gt; rank;      &#x2F;&#x2F; 秩数组，记录以该结点为根结点的树的深度，主要用于优化，在合并两个集合的时候，rank大的集合合并rank小的集合public:    DisJointSetUnion(int n)          &#x2F;&#x2F;构造函数    &#123;        for (int i &#x3D; 0; i &lt; n; i++)        &#123;            parent.push_back(i);      &#x2F;&#x2F;此时各自为王，自己就是一个集合            rank.push_back(1);        &#x2F;&#x2F;rank&#x3D;1，此时每个结点自己就是一颗深度为1的树        &#125;    &#125;    &#x2F;&#x2F;查找根结点    int find(int x)    &#123;        if(x&#x3D;&#x3D;parent[x])            return x;        else        &#123;            parent[x] &#x3D; find(parent[x]);   &#x2F;&#x2F; 路径压缩， 遍历过程中的所有双亲结点直接指向根结点，减少后续查找次数            return parent[x];        &#125;    &#125;    void merge(int x,int y)    &#123;        int rx &#x3D; find(x);                    &#x2F;&#x2F;查找x的根结点，即x所在集合的代表元素        int ry &#x3D; find(y);        if (rx !&#x3D; ry)                           &#x2F;&#x2F;如果不是同一个集合        &#123;            if (rank[rx] &lt; rank[ry])     &#x2F;&#x2F;rank大的集合合并rank小的集合            &#123;                swap(rx, ry);               &#x2F;&#x2F;这里进行交换是为了保证rx的rank大于ry的rank，方便下面合并            &#125;             parent[ry] &#x3D; rx;              &#x2F;&#x2F;rx 合并 ry            if (rank[rx] &#x3D;&#x3D; rank[ry])                rank[rx] +&#x3D; 1;        &#125;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Leetcode-547-省份数量"><a href="#Leetcode-547-省份数量" class="headerlink" title="Leetcode 547.省份数量"></a>Leetcode 547.省份数量</h2><pre class="line-numbers language-none"><code class="language-none">class Solution &#123;public:    vector&lt;int&gt; parent;    vector&lt;int&gt; ranks;    int findx(int x)&#123;        if(x&#x3D;&#x3D;parent[x])&#123;            return x;        &#125;        else&#123;            parent[x] &#x3D; findx(parent[x]);            return parent[x];        &#125;    &#125;    void uni(int x, int y)&#123;        int rx &#x3D; findx(x);        int ry &#x3D; findx(y);        if(rx!&#x3D;ry)&#123;            &#x2F;&#x2F;if(ranks[rx] &lt; ranks[ry]) swap(rx, ry);            parent[ry] &#x3D; rx;            &#x2F;&#x2F;if(ranks[rx]&#x3D;&#x3D;ranks[ry]) ranks[rx]+&#x3D;1;        &#125;    &#125;    int findCircleNum(vector&lt;vector&lt;int&gt;&gt;&amp; isConnected) &#123;        int n &#x3D; isConnected.size();        parent.resize(n+1);        &#x2F;&#x2F;ranks.resize(n+1, 1);        for(int i &#x3D; 1; i &lt;&#x3D; n; ++i)&#123;            parent[i] &#x3D; i;        &#125;        for(int i &#x3D; 0; i &lt; n; ++i)&#123;            for(int j &#x3D; 1; j &lt; n; ++j)&#123;                if(isConnected[i][j]&#x3D;&#x3D;1) uni(i+1, j+1);            &#125;        &#125;        int ans &#x3D; 0;        unordered_set&lt;int&gt; se;        for(int i &#x3D; 1; i &lt;&#x3D; n; ++i)&#123;            int x &#x3D; findx(i);            if(!se.count(x))&#123;                ans++;                se.insert(x);            &#125;        &#125;        return ans;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大排序总结</title>
      <link href="/2023/02/26/shi-da-pai-xu-zong-jie/"/>
      <url>/2023/02/26/shi-da-pai-xu-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="排序算法总结"><a href="#排序算法总结" class="headerlink" title="排序算法总结"></a>排序算法总结</h1><h2 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h2><ol><li><p>思路：通过两两交换，每次外循环都把最大or最小的数放到最后，像水底的泡泡一样，越往上越大</p></li><li><p>时间复杂度：稳定，最好O(n)，最差O(n^2)，平均O(n^2)</p></li><li><p>空间复杂度：O(1)</p></li><li><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//每次循环把最大/最小的数放到了最后</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//如果flag为true，代表本次循环无交换操作，排序结束</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//把大的数往后移</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="二、选择排序"><a href="#二、选择排序" class="headerlink" title="二、选择排序"></a>二、选择排序</h2><ol><li><p>思路：每次外循环找到最大or最小的数，直接放到最前面or最后面</p></li><li><p>时间复杂度：不稳定，最好O(n^2)，最差O(n^2)，平均O(n^2)</p></li><li><p>空间复杂度：O(1)</p></li><li><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">SelectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token comment">//找到后面最小的数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//把最小的数和当前位置的数交换，然后转到下一位置</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>minIndex <span class="token operator">!=</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="三、插入排序"><a href="#三、插入排序" class="headerlink" title="三、插入排序"></a>三、插入排序</h2><ol><li><p>思路：在数组前面构建一个有序区域，遍历到每一个数字都把它们通过两两交换插入到自己应该在的位置</p></li><li><p>时间复杂度：稳定，最好O(n)，最差O(n^2)，平均O(n^2)</p></li><li><p>空间复杂度：O(1)</p></li><li><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">InsertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//i为当前需要插入的数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> preIndex <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> current <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//一直把有序区域的数往后移，直到找到比当前插入数字小的数</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>preIndex<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> current<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>preIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            preIndex<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//插入当前数字</span>        arr<span class="token punctuation">[</span>preIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="四、希尔排序"><a href="#四、希尔排序" class="headerlink" title="四、希尔排序"></a>四、希尔排序</h2><ol><li><p>思路：也是一种插入排序，通过增加分组过程，减少了插入排序移动的次数，达到了O(nlogn)的时间复杂度。</p></li><li><p>时间复杂度：稳定，最好O(nlogn)，最差O(n^2)，平均O(nlogn)</p></li><li><p>空间复杂度：O(1)</p></li><li><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">ShellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> gap <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//把每组组内进行插入排序</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> cur <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> preIndex <span class="token operator">=</span> i<span class="token operator">-</span>gap<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>preIndex<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token operator">></span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>preIndex<span class="token operator">+</span>gap<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>                preIndex <span class="token operator">-=</span> gap<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            arr<span class="token punctuation">[</span>preIndex<span class="token operator">+</span>gap<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//减少组的数量，此时组内再进行交换的话，由于一半的数已经是有序的了，插入排序移动的次数会减少。</span>        gap <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="五、归并排序"><a href="#五、归并排序" class="headerlink" title="五、归并排序"></a>五、归并排序</h2><ol><li><p>思路：是一种分治算法，本质上类似于二叉树的后序遍历，先完成左右两部分的排序，再完成自身整体的排序。</p></li><li><p>时间复杂度：稳定，最好O(nlogn)，最差O(nlogn)，平均O(nlogn)</p></li><li><p>空间复杂度：O(n)</p></li><li><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">MergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">//分成左右两个部分</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//先递归完成左右两部分的排序，最后对自己排序</span>    <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">MergeSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MergeSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>left<span class="token punctuation">.</span>length<span class="token operator">+</span>right<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//由于左右两部分是排好序的，只需要用双指针方法进行合并</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>left<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>right<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="六、快速排序"><a href="#六、快速排序" class="headerlink" title="六、快速排序"></a>六、快速排序</h2><ol><li><p>思路：也是一种分治算法，类似于二叉树的前序遍历，先通过一个基准数分区(为基准数找到自己在整体中应该在的位置，也就是前面的数都比自己小，后面的数都比自己大)，再对分成的左右两部分分别进行排序。</p></li><li><p>时间复杂度：不稳定，最好O(nlogn)，最差O(nlogn)，平均O(nlogn)</p></li><li><p>空间复杂度：O(nlogn)</p></li><li><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//找到基准数在的位置</span>        <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> position<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> position<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pointer <span class="token operator">=</span> low<span class="token punctuation">;</span>    <span class="token comment">//把比基准数小的数全部放在前面</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> high<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>pointer<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>pointer<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            pointer<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//把基准数放到对应位置，此时前面的数全部小于基准数，后面的数全部大于基准数</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>pointer<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>pointer<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">return</span> pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="七、堆排序"><a href="#七、堆排序" class="headerlink" title="七、堆排序"></a>七、堆排序</h2><ol><li><p>思路：也是构建有序区的思路，但是使用的是堆的数据结构来实现的，每次把最大or最小的数放到堆顶，然后和有序区当前点进行交换，有序区当前点往前移动一位。</p></li><li><p>时间复杂度：不稳定，最好O(nlogn)，最差O(nlogn)，平均O(nlogn)</p></li><li><p>空间复杂度：O(1)</p></li><li><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> heapLen<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">HeapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    heapLen <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">//建立最大堆</span>    <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//把堆顶与有序区当前判断点交换，有序区(i到arr.length-1)长度+1，堆对应长度heapLen-1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        heapLen <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//维护最大堆，只要堆下面有更大的数，就会被传上来</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> largest <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span>heapLen <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> largest <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>heapLen <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> largest <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>largest<span class="token operator">!=</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> largest<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//递归处理交换后的子堆</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> largest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="八、计数排序"><a href="#八、计数排序" class="headerlink" title="八、计数排序"></a>八、计数排序</h2><ol><li><p>思路：通过找到最大值和最小值，创建一个新数组，索引为原数-最小值的差，然后依次拿出即可得到排好序的数组</p></li><li><p>时间复杂度：稳定，最好O(n+k)，最差O(n+k)，平均O(n+k)，k为最大最小值的差</p></li><li><p>空间复杂度：O(k)</p></li><li><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMinAndMax</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> maxx <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> minn <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minn<span class="token punctuation">)</span> minn <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> maxx<span class="token punctuation">)</span> maxx <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>minn<span class="token punctuation">,</span> maxx<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">CountingSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token comment">//找到最大最小值</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> extremum <span class="token operator">=</span> <span class="token function">getMinAndMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> minn <span class="token operator">=</span> extremum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxx <span class="token operator">=</span> extremum<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//创建新数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> countArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>maxx<span class="token operator">-</span>minn<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//把所有数放进新数组中</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> countArr<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minn<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">//算上自己前面一共有多少个数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> countArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> countArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> countArr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//依次拿出，得到有序数组</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> countArr<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minn<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        res<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        countArr<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minn<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="九、桶排序"><a href="#九、桶排序" class="headerlink" title="九、桶排序"></a>九、桶排序</h2><ol><li><p>思路：通过一定方法进行分组(数字大小和分组需要有关)，分一次组后，前面组内的所有数字一定比后面组内的所有数字小or大，然后递归排序即可。</p></li><li><p>时间复杂度：稳定，最好O(n+k)，最差O(n^2)，平均O(n+k)，k为初始桶数</p></li><li><p>空间复杂度：O(k)</p></li><li><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMinAndMax</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> maxx <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> minn <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> minn<span class="token punctuation">)</span> minn <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> maxx<span class="token punctuation">)</span> maxx <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>minn<span class="token punctuation">,</span> maxx<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token class-name">BucketSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span> <span class="token operator">||</span> bucketSize<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> extremum <span class="token operator">=</span> <span class="token function">getMinAndMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> minn <span class="token operator">=</span> extremum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxx <span class="token operator">=</span> extremum<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> bucketNum <span class="token operator">=</span> <span class="token punctuation">(</span>maxx<span class="token operator">-</span>minn<span class="token punctuation">)</span><span class="token operator">/</span>bucketSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketNum<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        buckets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//数字越大，会排到越后面的组</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> element <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token punctuation">(</span>element<span class="token operator">-</span>minn<span class="token punctuation">)</span><span class="token operator">/</span>bucketSize<span class="token punctuation">;</span>        buckets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//递归使用桶排序</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buckets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>buckets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            buckets<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token class-name">BucketSort</span><span class="token punctuation">(</span>buckets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> bucketSize<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取结果</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> bucket <span class="token operator">:</span> buckets<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>bucket<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="十、基数排序"><a href="#十、基数排序" class="headerlink" title="十、基数排序"></a>十、基数排序</h2><ol><li><p>思路：依次对每个数字的个位、十位、百位……进行排序，越到后面优先级越高</p></li><li><p>时间复杂度：稳定，最好O(n<em>k)，最差O(n</em>k)，平均O(n*k)，k是最大值的位数</p></li><li><p>空间复杂度：O(n+k)</p></li><li><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">RadixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxx <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> maxx <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxx<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//算出最大值的位数</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>maxx<span class="token operator">/</span><span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        maxx <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对每一位进行排序，优先级越到后面越高，所以先从个位开始</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> radix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            radix<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> element <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token punctuation">(</span>element<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            radix<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//先放当前对应位数字小的</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> l <span class="token operator">:</span> radix<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>质数筛</title>
      <link href="/2022/11/15/zhi-shu-shai/"/>
      <url>/2022/11/15/zhi-shu-shai/</url>
      
        <content type="html"><![CDATA[<h1 id="质数筛"><a href="#质数筛" class="headerlink" title="质数筛"></a>质数筛</h1><h2 id="埃氏筛"><a href="#埃氏筛" class="headerlink" title="埃氏筛"></a>埃氏筛</h2><ol><li>时间复杂度O(n loglogn)</li><li>思路：将每个质数的倍数标记为合数<pre class="line-numbers language-none"><code class="language-none">int visit[maxn];  void Prime()&#123;    mem(visit,0);           &#x2F;&#x2F;初始化都是素数    visit[0] &#x3D; visit[1] &#x3D; 1;  &#x2F;&#x2F;0 和 1不是素数    for (int i &#x3D; 2; i &lt;&#x3D; maxn; i++) &#123;        if (!visit[i]) &#123;         &#x2F;&#x2F;如果i是素数，让i的所有倍数都不是素数            for (int j &#x3D; i*i; j &lt;&#x3D; maxn; j +&#x3D; i) &#123;                 visit[j] &#x3D; 1;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a>欧拉筛</h2><ol><li>时间复杂度：O(n)</li><li>思路：在埃氏筛的基础上，让每个合数只被它的最小质因数筛选依次，从而不会出现埃氏筛中的重复情况</li></ol><pre class="line-numbers language-none"><code class="language-none">int prime[maxn];int visit[maxn];void Prime()&#123;    mem(visit,0);    mem(prime, 0);    for (int i &#x3D; 2;i &lt;&#x3D; maxn; i++) &#123;        cout&lt;&lt;&quot; i &#x3D; &quot;&lt;&lt;i&lt;&lt;endl;        if (!visit[i]) &#123;            prime[++prime[0]] &#x3D; i;      &#x2F;&#x2F;记录素数， 这个prime[0] 相当于 cnt，用来计数        &#125;        for (int j &#x3D; 1; j &lt;&#x3D;prime[0] &amp;&amp; i*prime[j] &lt;&#x3D; maxn; j++) &#123;&#x2F;&#x2F;            cout&lt;&lt;&quot;  j &#x3D; &quot;&lt;&lt;j&lt;&lt;&quot; prime[&quot;&lt;&lt;j&lt;&lt;&quot;]&quot;&lt;&lt;&quot; &#x3D; &quot;&lt;&lt;prime[j]&lt;&lt;&quot; i*prime[j] &#x3D; &quot;&lt;&lt;i*prime[j]&lt;&lt;endl;            visit[i*prime[j]] &#x3D; 1;            &#x2F;&#x2F;最重要的一步，保证了使用的都是最小质因数            if (i % prime[j] &#x3D;&#x3D; 0) &#123;                break;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 零散算法技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调栈</title>
      <link href="/2022/11/10/dan-diao-zhan/"/>
      <url>/2022/11/10/dan-diao-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><h2 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h2><ol><li><p>将栈内小于&#x2F;大于自己的元素排除，由此栈内元素一定保持单调性。</p></li><li><p>复杂度：只需要遍历原序列一次(常数次)即可，故复杂度为O(n)。</p></li></ol><h2 id="二、能解决的问题"><a href="#二、能解决的问题" class="headerlink" title="二、能解决的问题"></a>二、能解决的问题</h2><ol><li>找到离自己<em><strong>最近</strong></em>的比自己大&#x2F;小的元素：常用来找峰值、得到有序子序列等。</li></ol><h2 id="三、例题"><a href="#三、例题" class="headerlink" title="三、例题"></a>三、例题</h2><h3 id="leetcode-654-最大二叉树-c"><a href="#leetcode-654-最大二叉树-c" class="headerlink" title="leetcode 654.最大二叉树(c++)"></a>leetcode 654.最大二叉树(c++)</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    TreeNode* constructMaximumBinaryTree(vector&lt;int&gt;&amp; nums) &#123;        int n &#x3D; nums.size();        stack&lt;int&gt; st;        vector&lt;int&gt; left(n, -1);        vector&lt;int&gt; right(n, -1);        vector&lt;TreeNode*&gt; tree(n);        for(int i &#x3D; 0; i &lt; n; ++i)&#123;            tree[i] &#x3D; new TreeNode(nums[i]);            while(!st.empty() &amp;&amp; nums[st.top()] &lt; nums[i])&#123;                right[st.top()] &#x3D; i;                st.pop();            &#125;            if(!st.empty())&#123;                left[i] &#x3D; st.top();            &#125;            st.push(i);        &#125;        &#x2F;&#x2F;cout &lt;&lt; 1 &lt;&lt; endl;        TreeNode* root &#x3D; nullptr;        for(int i &#x3D; 0; i &lt; n; ++i)&#123;            if(left[i]&#x3D;&#x3D;-1 &amp;&amp; right[i]&#x3D;&#x3D;-1)&#123;                root &#x3D; tree[i];            &#125;            else if(right[i]&#x3D;&#x3D;-1 || (left[i]!&#x3D;-1 &amp;&amp; right[i]!&#x3D;-1 &amp;&amp; nums[left[i]] &lt; nums[right[i]]))&#123;                tree[left[i]]-&gt;right &#x3D; tree[i];            &#125;            else&#123;                tree[right[i]]-&gt;left &#x3D; tree[i];            &#125;        &#125;        return root;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Leetcode-496-下一个更大元素-I"><a href="#Leetcode-496-下一个更大元素-I" class="headerlink" title="Leetcode 496.下一个更大元素 I"></a>Leetcode 496.下一个更大元素 I</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> mp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Stack&lt;Integer> st = new Stack&lt;Integer>();</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nums2<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                st<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                mp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> mp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> mp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Leetcode-739-每日温度"><a href="#Leetcode-739-每日温度" class="headerlink" title="Leetcode 739.每日温度"></a>Leetcode 739.每日温度</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dailyTemperatures</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temperatures<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//Stack&lt;Integer> st = new Stack&lt;>();</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>temperatures<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> temperatures<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> temperatures<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                st<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> st<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Leetcode-316-去除重复字母"><a href="#Leetcode-316-去除重复字母" class="headerlink" title="Leetcode 316.去除重复字母"></a>Leetcode 316.去除重复字母</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeDuplicateLetters</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lastidx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">;</span>            lastidx<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> appeared <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//Stack&lt;Character> st = new Stack&lt;>();</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>appeared<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment">// 把前面比自己字母序大的字母(后面还会继续出现)删除，如果此次是该字母最后一次出现，则直接使用</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>c <span class="token operator">&amp;&amp;</span> lastidx<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">></span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                appeared<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                st<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            st<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            appeared<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Character</span> c <span class="token operator">:</span> st<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typecho搭建</title>
      <link href="/2022/08/03/typecho/"/>
      <url>/2022/08/03/typecho/</url>
      
        <content type="html"><![CDATA[<h1 id="Typecho搭建博客"><a href="#Typecho搭建博客" class="headerlink" title="Typecho搭建博客"></a>Typecho搭建博客</h1><p>1.购买服务器</p><p>2.安装Apache以及扩展包</p><pre class="line-numbers language-none"><code class="language-none">yum -y install httpdyum -y install httpd-manual mod_ssl mod_perl mod_auth_mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.安装php以及扩展包</p><pre class="line-numbers language-none"><code class="language-none">yum -y install php-mysql php php-fpmyum -y install php-gd php-xml php-mbstring php-ldap php-pear php-xmlrpc php-devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.安装mysql以及扩展包</p><pre class="line-numbers language-none"><code class="language-none">yum -y install mysqlwget http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql-community-release-el7-5.noarch.rpmrpm -ivh mysql-community-release-el7-5.noarch.rpmyum install mysql-community-serveryum -y install mysql-connector-odbc mysql-devel libdbi-dbd-mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.设置Apache和mysql的开机启动</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable httpd.servicesystemctl enable mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6.重启Apache,php和mysql</p><pre class="line-numbers language-none"><code class="language-none">service mysqld restartservice php-fpm restartservice httpd restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>7.进入mysql设置mysql密码</p><pre class="line-numbers language-none"><code class="language-none">set password for &#39;root&#39;@&#39;localhost&#39; &#x3D; password(&#39;你要设置的密码&#39;);create database typecho;grant all privileges on typecho.* to typecho@localhost identified by &#39;password&#39;;flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>8.服务检查</p><pre class="line-numbers language-none"><code class="language-none">netstat –tulpn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看上述服务是否都正常开启<br>进入&#x2F;var&#x2F;www&#x2F;html 创建一个php文件检查是否能通过IP&#x2F;xxx.php访问</p><p>9.下载typecho压缩包并在&#x2F;var&#x2F;www&#x2F;html目录下解压缩，可以根据自己的想法来定义目录，访问install.php开启typecho安装(注意默认数据库)</p><pre class="line-numbers language-none"><code class="language-none">wget http:&#x2F;&#x2F;typecho.org&#x2F;downloads&#x2F;1.1-17.10.30-release.tar.gz tar -zxvf 1.1-17.10.30-release.tar.gzcd buildcp -rf .&#x2F;* &#x2F;var&#x2F;www&#x2F;html&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>10.安装成功后，可以进入<a href="https://typecho.me/">typecho模板站</a>来选择自己想要使用的模板，方便快捷。把模板下载解压后，移动到typecho安装目录的&#x2F;usr&#x2F;themes目录下，就可以在管理界面中的修改外观中选择使用。</p><p>11.推荐markdown在线编辑器<a href="https://pandao.github.io/editor.md/">Editor</a>,下载之后可以在typecho插件管理界面启动。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建</title>
      <link href="/2022/08/03/hexo/"/>
      <url>/2022/08/03/hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo搭建：centos-7-6-Node-js-16-16-0-LTS"><a href="#Hexo搭建：centos-7-6-Node-js-16-16-0-LTS" class="headerlink" title="Hexo搭建：centos 7.6, Node.js 16.16.0 LTS"></a>Hexo搭建：centos 7.6, Node.js 16.16.0 LTS</h1><ol><li><p>安装git<br> yum install git-core</p></li><li><p><a href="https://github.com/nodesource/distributions#rpminstall">安装Node.js</a><br> yum install gcc-c++ make+</p><p> curl -sL <a href="https://dl.yarnpkg.com/rpm/yarn.repo">https://dl.yarnpkg.com/rpm/yarn.repo</a> | tee &#x2F;etc&#x2F;yum.repos.d&#x2F;yarn.repo<br> yum install yarn</p><p> curl -fsSL <a href="https://rpm.nodesource.com/setup_lts.x">https://rpm.nodesource.com/setup_lts.x</a> | bash -<br> yum install -y nodejs</p></li><li><p>安装hexo</p><p> npm install -g hexo-cli<br> mkdir -p &#x2F;var&#x2F;www&#x2F;hexo<br> hexo init hexo(在&#x2F;var&#x2F;www 下创建文件夹hexo， 然后在www目录下进行此命令)<br> cd hexo<br> npm install</p><p> hexo generate<br> hexo s 此时开启4000端口防火墙，可以通过4000端口访问hexo主页面</p></li><li><p>安装并配置ngnix</p><p> yum install -y nginx<br> vi &#x2F;etc&#x2F;nginx&#x2F;nginx.conf<br> 修改如下内容<br> server{<br> root  &#x2F;var&#x2F;www&#x2F;hexo&#x2F;public(此处为hexo路径);<br> }</p><p> nginx -s reload 此时访问可以看见和第3步一样的页面，就是public下的index.html</p></li><li><p>下载主题</p><p>进入&#x2F;hexo&#x2F;themes<br>git clone <a href="https://github.com/blinkfox/hexo-theme-matery.git">https://github.com/blinkfox/hexo-theme-matery.git</a></p></li><li><p>配置主题<br>&#x2F;hexo中的_config.yml<br>修改下方Extensions内的theme</p><p>theme: hexo-theme-matery(主题文件夹名)</p><p>hexo clean<br>hexo generate 此时访问ip地址就可以看见新主题了</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
